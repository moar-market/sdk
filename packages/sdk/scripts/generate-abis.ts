#!/usr/bin/env node
import type { MoveModule } from '@aptos-labs/ts-sdk'
import type { Address } from '../src/types'
import fs from 'node:fs'
import path from 'node:path'
import process from 'node:process'
import { fileURLToPath } from 'node:url'
import { useAptos } from './../src/clients'
import { useModulesConfig } from './../src/config'
import { getScopeWithModule } from './utils'

// Get current directory equivalent to __dirname in CommonJS
const currentDir = path.dirname(fileURLToPath(import.meta.url))

// Configuration
const OUTPUT_DIR = path.resolve(currentDir, '../src/abis')

/**
 * Generate TypeScript file with ABI content
 */
function generateABIFile(moduleKey: string, abi: MoveModule) {
  const fileName = `${moduleKey}_abi.ts`
  const filePath = path.join(OUTPUT_DIR, fileName)
  abi.address = '0x0' // remove address to use abi for multiple deployments or networks

  const fileContent = `// This file is auto-generated by the generate-abis.ts script
export const ${moduleKey}_abi = ${JSON.stringify(abi, null, 2)} as const;
`

  // Ensure directory exists
  if (!fs.existsSync(OUTPUT_DIR)) {
    fs.mkdirSync(OUTPUT_DIR, { recursive: true })
  }

  // Write the file
  fs.writeFileSync(filePath, fileContent)
}

/**
 * Main function to generate all ABI files
 */
async function main() {
  // oxlint-disable-next-line no-console
  console.log('Starting ABI generation...')

  const aptos = useAptos()

  // Ensure output directory exists
  if (!fs.existsSync(OUTPUT_DIR)) {
    fs.mkdirSync(OUTPUT_DIR, { recursive: true })
  }

  const modules = useModulesConfig()

  let indexFileContent = '// This file is auto-generated by the generate-abis.ts script\n\n'
  const exportedAbis: string[] = []

  // Process each module
  for (const [moduleKey] of Object.entries(modules)) {
    const moduleAddress = modules[moduleKey as keyof typeof modules] as Address
    // console.log(moduleKey, ':', moduleAddress)
    try {
      const [, moduleName] = getScopeWithModule(moduleKey) as [string, string]

      // Fetch ABI from chain
      const abi = (await aptos.getAccountModule({ accountAddress: moduleAddress, moduleName })).abi

      // Generate file with the ABI
      generateABIFile(moduleKey, abi as MoveModule)
      exportedAbis.push(moduleKey)
    }
    catch (error) {
      console.error(`Failed to generate ABI for ${moduleKey} : ${moduleAddress}:`, error)
    }
  }

  indexFileContent += exportedAbis.sort(
    (a, b) => a.localeCompare(b, undefined, {
      numeric: true,
      sensitivity: 'base',
    }),
  ).map(abi => `export * from './${abi}_abi'\n`).join('\n')

  // Write the index file
  fs.writeFileSync(path.join(OUTPUT_DIR, 'index.ts'), indexFileContent)

  // oxlint-disable-next-line no-console
  console.log('ABI generation complete!')
}

// Run the script
main().catch((error) => {
  console.error('Error generating ABIs:', error)
  process.exit(1)
})
