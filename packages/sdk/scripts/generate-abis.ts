#!/usr/bin/env node
// oxlint-disable no-console
import type { MoveModule } from '@aptos-labs/ts-sdk'
import type { Address } from '../src/types'
import fs from 'node:fs'
import path from 'node:path'
import process from 'node:process'
import { fileURLToPath, pathToFileURL } from 'node:url'
import { useAptos } from './../src/clients'
import { setConfig, useModulesConfig } from './../src/config'
import { getScopeWithModule } from './utils'

// Get current directory equivalent to __dirname in CommonJS
const currentDir = path.dirname(fileURLToPath(import.meta.url))

// Configuration
const OUTPUT_DIR = path.resolve(currentDir, '../src/abis')

/**
 * Generate TypeScript file with ABI content
 */
function generateABIFile(moduleKey: string, abi: MoveModule) {
  const fileName = `${moduleKey}_abi.ts`
  const filePath = path.join(OUTPUT_DIR, fileName)
  abi.address = '0x0' // remove address to use abi for multiple deployments or networks if it don't depend on friends

  const fileContent = `// This file is auto-generated by the generate-abis.ts script
export const ${moduleKey}_abi = ${JSON.stringify(abi, null, 2)} as const;
`

  // Ensure directory exists
  if (!fs.existsSync(OUTPUT_DIR)) {
    fs.mkdirSync(OUTPUT_DIR, { recursive: true })
  }

  // Write the file
  fs.writeFileSync(filePath, fileContent)
}

/**
 * Main function to generate all ABI files
 */
async function main() {
  console.log('Starting ABI generation...')

  // Support passing external config path via --config or SDK_CONFIG_PATH
  const argv = process.argv.slice(2)
  const getArg = (name: string) => {
    const idx = argv.indexOf(name)
    return idx !== -1 ? argv[idx + 1] : undefined
  }

  if (argv.includes('--help') || argv.includes('-h')) {
    console.log('Usage: tsx scripts/generate-abis.ts [--config /abs/path/to/chain.config.ts]')
    console.log('       You can also set SDK_CONFIG_PATH env var to point to a config file.')
  }

  const configPathFromArg = getArg('--config') || process.env.SDK_CONFIG_PATH
  if (configPathFromArg) {
    const baseDir = process.env.SDK_CONFIG_BASE_DIR || process.env.INIT_CWD || process.cwd()
    const resolvedConfigPath = path.isAbsolute(configPathFromArg)
      ? configPathFromArg
      : path.resolve(baseDir, configPathFromArg)

    console.log(`Loading config from: ${resolvedConfigPath}`)
    try {
      const imported = await import(pathToFileURL(resolvedConfigPath).href)
      // Accept default export, named export `config`, or the module itself
      const externalConfig = (imported?.default ?? imported?.config ?? imported) as any
      if (!externalConfig?.CHAIN || !externalConfig?.MODULES) {
        throw new Error('Invalid config: missing CHAIN or MODULES')
      }
      setConfig(externalConfig)
    }
    catch (error) {
      console.error('Failed to load provided config file:', error)
      process.exit(1)
    }
  }
  else {
    console.log('No config file provided, using default config')
  }

  const aptos = useAptos()

  // Ensure output directory exists
  if (!fs.existsSync(OUTPUT_DIR)) {
    fs.mkdirSync(OUTPUT_DIR, { recursive: true })
  }

  const modules = useModulesConfig()

  let indexFileContent = '// This file is auto-generated by the generate-abis.ts script\n\n'
  const exportedAbis: string[] = []

  // Process each module
  for (const [moduleKey] of Object.entries(modules)) {
    const moduleAddress = modules[moduleKey as keyof typeof modules] as Address
    // console.log(moduleKey, ':', moduleAddress)
    try {
      const [, moduleName] = getScopeWithModule(moduleKey) as [string, string]

      // Fetch ABI from chain
      const abi = (await aptos.getAccountModule({ accountAddress: moduleAddress, moduleName })).abi

      // Generate file with the ABI
      generateABIFile(moduleKey, abi as MoveModule)
      exportedAbis.push(moduleKey)
    }
    catch (error) {
      console.error(`Failed to generate ABI for ${moduleKey} : ${moduleAddress}:`, error)
    }
  }

  indexFileContent += exportedAbis.sort(
    (a, b) => a.localeCompare(b, undefined, {
      numeric: true,
      sensitivity: 'base',
    }),
  ).map(abi => `export * from './${abi}_abi'\n`).join('\n')

  // Write the index file
  fs.writeFileSync(path.join(OUTPUT_DIR, 'index.ts'), indexFileContent)

  console.log('ABI generation complete!')
}

// Run the script
main().catch((error) => {
  console.error('Error generating ABIs:', error)
  process.exit(1)
})
